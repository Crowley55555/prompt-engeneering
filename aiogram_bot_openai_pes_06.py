"""
–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤ —Å OpenAI API (aiogram)

–ù–ê–°–¢–†–û–ô–ö–ê:
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt
2. –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:
   OPENAI_API_KEY=–≤–∞—à_–∫–ª—é—á_openai
   TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞
   LANGFUSE_PUBLIC_KEY=–≤–∞—à_–ø—É–±–ª–∏—á–Ω—ã–π_–∫–ª—é—á_langfuse (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   LANGFUSE_SECRET_KEY=–≤–∞—à_—Å–µ–∫—Ä–µ—Ç–Ω—ã–π_–∫–ª—é—á_langfuse (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   LANGFUSE_HOST=https://cloud.langfuse.com (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

3. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞:
   - –ù–∞–ø–∏—à–∏—Ç–µ @BotFather –≤ Telegram
   - –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /newbot
   - –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω

–ú–û–ù–ò–¢–û–†–ò–ù–ì:
- –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∫ OpenAI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è –≤ Langfuse
- –ú–æ–∂–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏, –º–µ—Ç—Ä–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
- –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–ª—é—á–µ–π Langfuse –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import asyncio
import logging
from typing import Dict, Any

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from langchain_core.prompts import ChatPromptTemplate
from langchain_openai import ChatOpenAI
from langfuse import Langfuse
from langfuse.langchain import CallbackHandler
from dotenv import load_dotenv
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
LANGFUSE_PUBLIC_KEY = os.getenv("LANGFUSE_PUBLIC_KEY")
LANGFUSE_SECRET_KEY = os.getenv("LANGFUSE_SECRET_KEY")
LANGFUSE_HOST = os.getenv("LANGFUSE_HOST", "https://cloud.langfuse.com")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Langfuse
langfuse = Langfuse(
    public_key=LANGFUSE_PUBLIC_KEY,
    secret_key=LANGFUSE_SECRET_KEY,
    host=LANGFUSE_HOST
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class UserStates(StatesGroup):
    waiting_for_description = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states: Dict[int, str] = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


class SEOAssistantBot:
    def __init__(self):
        self.llm = ChatOpenAI(
            model="gpt-4o-mini",
            temperature=0.2,
            api_key=OPENAI_API_KEY
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è SEO-–æ–ø–∏—Å–∞–Ω–∏–π
        self.prompt = ChatPromptTemplate.from_messages([
            ("system", """–°–æ—Å—Ç–∞–≤—å SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞, —Å–ª–µ–¥—É—è –ø–æ—à–∞–≥–æ–≤–æ–º—É —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—é:

–®–∞–≥ 1: –û–ø—Ä–µ–¥–µ–ª–∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞.
–®–∞–≥ 2: –ü–µ—Ä–µ—á–∏—Å–ª–∏ 3‚Äì4 –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞.
–®–∞–≥ 3: –í–∫–ª—é—á–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤ —Ç–µ–∫—Å—Ç.
–®–∞–≥ 4: –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é.
–®–∞–≥ 5: –û–±—ä–µ–¥–∏–Ω–∏ –≤—Å—ë –≤ —Å–≤—è–∑–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±—ä—ë–º–æ–º 150‚Äì200 —Å–ª–æ–≤.

–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –¥–æ 500 —Å–ª–æ–≤.
–ü—Ä–æ–≤–µ—Ä—å —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –∏ –ø–æ–≤—Ç–æ—Ä–æ–≤.

–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:
üîπ **–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:**
[–∫—Ä–∞—Ç–∫–æ–µ –∏ —ë–º–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –£–¢–ü]

üîπ **–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è):**
[–æ–¥–Ω–æ —Å–∏–ª—å–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ –∫—É–ø–∏—Ç—å]

üîπ **–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (5‚Äì7 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π):**
[–æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π, —É–¥–æ–±—Å—Ç–≤–∞, –≤—ã–≥–æ–¥—ã –∏ —Å—Ü–µ–Ω–∞—Ä–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è; –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è]

üîπ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
- [–ø—É–Ω–∫—Ç 1]
- [–ø—É–Ω–∫—Ç 2]
- [–ø—É–Ω–∫—Ç 3]
- [–ø—É–Ω–∫—Ç 4]

üîπ **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**
- [–ø–∞—Ä–∞–º–µ—Ç—Ä: –∑–Ω–∞—á–µ–Ω–∏–µ]
- [–ø–∞—Ä–∞–º–µ—Ç—Ä: –∑–Ω–∞—á–µ–Ω–∏–µ]
- [–ø–∞—Ä–∞–º–µ—Ç—Ä: –∑–Ω–∞—á–µ–Ω–∏–µ]
- [–ø–∞—Ä–∞–º–µ—Ç—Ä: –∑–Ω–∞—á–µ–Ω–∏–µ]

üîπ **SEO-–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:**
[—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é]"""),
            ("user", "–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_input}")
        ])

    async def generate_seo_description(self, user_input: str, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SEO-–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ CallbackHandler –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ Langfuse
            langfuse_handler = CallbackHandler()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏
            chain = self.prompt | self.llm
            
            # –í—ã–∑–æ–≤ —Ü–µ–ø–æ—á–∫–∏ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
            response = chain.invoke(
                {"user_input": user_input},
                config={"callbacks": [langfuse_handler]}
            )
            
            return response.content
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {str(e)}"


# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
seo_bot = SEOAssistantBot()


@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    await state.set_state(UserStates.waiting_for_description)
    
    welcome_text = f"""ü§ñ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø - SEO-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ, SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ª—é–±—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.

üìù **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
2. –Ø —Å–æ–∑–¥–∞–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ SEO-–æ–ø–∏—Å–∞–Ω–∏–µ
3. –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏

üöÄ **–ù–∞—á–Ω–µ–º?** –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞!"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="create_description")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    
    await message.answer(welcome_text, reply_markup=keyboard)


@dp.message(Command("help"))
async def help_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """üìö **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

**–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ:**
1. –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –µ–≥–æ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
2. –ë–æ—Ç —Å–æ–∑–¥–∞—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ SEO-–æ–ø–∏—Å–∞–Ω–∏–µ
3. –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏

**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤"
‚Ä¢ "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ —Å —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º"
‚Ä¢ "–£–º–Ω—ã–µ —á–∞—Å—ã –¥–ª—è —Å–ø–æ—Ä—Ç–∞"

**–§–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:**
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
‚Ä¢ –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
‚Ä¢ SEO-–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"""
    
    await message.answer(help_text)


@dp.message(Command("status"))
async def status_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    if LANGFUSE_PUBLIC_KEY and LANGFUSE_SECRET_KEY:
        status_text = "‚úÖ **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω**\n\n–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è –≤ Langfuse –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."
    else:
        status_text = "‚ö†Ô∏è **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω**\n\n–î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–∏ Langfuse –≤ .env —Ñ–∞–π–ª –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
    
    await message.answer(status_text)


@dp.message(UserStates.waiting_for_description)
async def handle_description_request(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
    user = message.from_user
    message_text = message.text
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    result = await seo_bot.generate_seo_description(message_text, user.id)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    await processing_msg.delete()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await message.answer(f"üìù **SEO-–æ–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ:**\n\n{result}")
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ", callback_data="create_description")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    
    await message.answer("–•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=keyboard)


@dp.callback_query(F.data == "create_description")
async def create_description_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è"""
    await state.set_state(UserStates.waiting_for_description)
    await callback.message.edit_text("üìù –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏ —è —Å–æ–∑–¥–∞–º SEO-–æ–ø–∏—Å–∞–Ω–∏–µ!")
    await callback.answer()


@dp.callback_query(F.data == "help")
async def help_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    help_text = """üìö **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ:**
1. –û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –µ–≥–æ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
2. –ë–æ—Ç —Å–æ–∑–¥–∞—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ SEO-–æ–ø–∏—Å–∞–Ω–∏–µ
3. –ü–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏

**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤"
‚Ä¢ "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ —Å —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º"
‚Ä¢ "–£–º–Ω—ã–µ —á–∞—Å—ã –¥–ª—è —Å–ø–æ—Ä—Ç–∞"""
    
    await callback.message.edit_text(help_text)
    await callback.answer()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    if not OPENAI_API_KEY:
        logger.error("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ SEO-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –±–æ—Ç–∞ –Ω–∞ aiogram...")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
